channel = channel or 'space.sine.fps'

spawnpoint = spawnpoint or {}

logger = logger or {}

spawnpoint.init = function()
    local myTeam = team or ''
    logger.log('spawnpoint team', myTeam)
    if myTeam ~= '' then
        logger.log('set team particles')
        Space.Host.InvokeEvent(myTeam)
    else
        logger.log('set free particles')
        Space.Host.InvokeEvent('free')
    end
    logger.log("checking for pre-existing")
    local points = Space.Shared.GetGlobal(channel, 'spawnpoints') or {}
    logger.log('got pre-existing', points)
    local dest = nil
    for i = #points, 1, -1 do
        if points[i].id == Space.Host.ExecutingObject.GlobalID then
            dest = points[i]
            logger.log('found destination', dest, true)
        end
    end
    if dest == nil then
        dest = {}
        dest.id = Space.Host.ExecutingObject.GlobalID
        dest.object = Space.Host.ExecutingObject
        logger.log('adding destination', dest)
        points[#points + 1] = dest
    else
        logger.log('destination found to update', dest)
    end

    dest.position = Space.Host.ExecutingObject.Root.WorldPosition
    dest.rotation = Space.Host.ExecutingObject.Root.WorldRotation
    dest.spawnMinRange = (spawnMinRange or 0)
    dest.spawnMaxRange = (spawnMaxRange or 5)
    dest.team = (team or '')
    logger.log('updating destination', dest)
    -- points[#points + 1] = dest
    if #points == 1 then
        logger.log('created new destination list', points)
        Space.Shared.SetGlobal(channel, 'spawnpoints', points)
    end
    logger.log('stored destination list', points)
end

Space.Host.InvokeDelayed(spawnpoint.init, 2)
