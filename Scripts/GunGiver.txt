channel = channel or 'space.sine.fps'

gunGiver = {}
gunGiver.gun = Space.GetResource('gun')
gunGiver.gunRemote = Space.GetResource('gunRemote')
gunGiver.gunMouselook = Space.GetResource('gunMouselook')
gunGiver.gunType = gunType or 'gun'
gunGiver.bulletType = bulletType or 'default'
gunGiver.animator = Space.GetResource('animator3rd')
gunGiver.bone = nil
gunGiver.bullet = Space.GetResource('bullet')
gunGiver.gunBarIcon = Space.GetResource('icon')
gunGiver.gunBarOrder = order or 0

gunGiver.weapons = {}

Vector = Vector or {}
Quaternion = Quaternion or {}
logger = logger or {}
bulletCrate = bulletCrate or {}

gunGiver.giveGun = function()
    if gunGiver.stats == nil then
        gunGiver.stats = Space.Shared.GetGlobal(channel, 'stats')
    end
    local gunData = {
        gunType = gunGiver.gunType
    }
    Space.Shared.CallFunction(channel, 'giveGun', {gunData})
    Space.Host.InvokeDelayed(gunGiver.createGuns, 5)
    logger.log('network sent, invoking give bullets', gunData)
    bulletCrate.tryGive(false, true)
    logger.log('complete')
end

gunGiver.createGuns = function()
    if gunGiver.weapons[gunGiver.gunType] == nil then
        gunGiver.weapons[gunGiver.gunType] = {
            gun = gunGiver.gun,
            gunInstance = Space.Scene.CreateGameObject(gunGiver.gun),
            gunMouselook = gunGiver.gunMouselook,
            gunMouselookInstance = Space.Scene.CreateGameObject(gunGiver.gunMouselook),
            gunRemote = gunGiver.gunRemote,
            gunType = gunGiver.gunType,
            bulletType = bulletCrate.bulletType,
            bullet = gunGiver.bullet,
            gunBarIcon = gunGiver.gunBarIcon,
            gunBarOrder = gunGiver.gunBarOrder,
            animator = gunGiver.animator
        }
    else
        gunGiver.weapons[gunGiver.gunType].gunInstance = Space.Scene.CreateGameObject(gunGiver.gun)
        gunGiver.weapons[gunGiver.gunType].gunMouselookInstance = Space.Scene.CreateGameObject(gunGiver.gunMouselook)
    end
end


gunGiver.queryBullets = function()
    local hitData = {}
    hitData['command'] = 'check'
    hitData['type'] = gunGiver.bulletType
    hitData['bullet'] = gunGiver.bullet
    Space.Shared.CallBroadcastFunction(channel .. '.bullets', 'check', {hitData})
end

gunGiver.init = function()
    gunGiver.weapons = Space.Shared.GetGlobal(channel, 'weapons')
    local createNew = false
    if gunGiver.weapons == nil then
        createNew = true
        gunGiver.weapons = {}
    end
    gunGiver.createGuns()
    if createNew then
        Space.Shared.SetGlobal(channel, 'weapons', gunGiver.weapons)
    end

    if gunGiver.animator == nil then
        logger.log('no animator in class')
    end
    if gunGiver.weapons[gunGiver.gunType].animator == nil then
        logger.log('no animator on weapon')
    end

    -- gunGiver.globalChannel = channel .. '.' .. tostring(Space.Host.ExecutingObject.Root.GlobalID)
    -- logger.log('listening on network channel', gunGiver.globalChannel, true)
    -- Space.Network.SubscribeToNetwork(gunGiver.globalChannel, gunGiver.onReceive)

    Space.Shared.RegisterBroadcastFunction(channel, 'queryBullets', gunGiver.queryBullets)

    local hitData = {}
    hitData['command'] = 'check'
    hitData['type'] = gunGiver.bulletType
    hitData['bullet'] = gunGiver.bullet
    Space.Shared.CallBroadcastFunction(channel .. '.bullets', 'check', {hitData})
end

Space.Host.StartCoroutine(gunGiver.init, nil, 'GunGiver init')

function giveGun()
    Space.Host.StartCoroutine(gunGiver.giveGun, nil, 'giveGun')
end
