channel = channel or 'space.sine.fps'

gun = {}
gun.barrel = Space.Host.GetReference('barrel')
gun.bullet = Space.GetResource('bullet')
gun.bulletType = bulletType or 'bullet'
gun.fireRate = tonumber(fireRate or 5.0)
gun.range = tonumber(range or 500)
gun.damageNpc = hitDamageNpc or 10
gun.damagePlayer = hitDamagePlayer or 10
gun.showHit = showHits or true
gun.hitBatch = {}
gun.nextSend = 0
gun.batchInterval = 0.1
--gun.modeFirst = false

logger = logger or {}
gun.simplifyHit = function(hit, falloff, hitPos)
    local result = {}
    result.Position = hitPos
    result.ShooterPos = Space.Scene.PlayerAvatar.GameObject.WorldPosition
    result.ShooterName = Space.Scene.PlayerAvatar.Username
    result.ShooterId = Space.Scene.PlayerAvatar.ID

    if hit.Object.Root.Avatar ~= nil then
        logger.log('Avatar hit')
        result.Avatar = hit.Object.Root.Avatar
        result.baseDamage = gun.damagePlayer
    else
        logger.log('Object hit')
        result.Object = hit.Object
        if hit.Object.GetScript('FPS') == nil and hit.Object.GetScript('FPS-MOD') ~= nil then
            result.Object = hit.Object.GetScriptInParent('FPS').GameObject
        end
        result.baseDamage = gun.damageNpc
    end
    result.Damage = result.baseDamage

    result.Normal = hit.Normal
    result.Static = false
    logger.log('hit values', result)
    return result
end

gun.detect = function(startPos)
    local hits = {}
    logger.log('shooting raycast')
    local hit = Space.Physics.RayCastSingle(startPos, Space.Camera.MainCamera.Forward, gun.range)
    if hit.Object ~= nil then
        if
            hit.ContainsHit and
                (hit.Object.Root.Avatar ~= nil and hit.Object.Root.Avatar.ID ~= Space.Scene.PlayerAvatar.ID) or
                (hit.Object.GetScript('FPS') or hit.Object.GetScript('FPS-MOD'))
         then
            logger.log('FPS Target')
            hits[1] = gun.simplifyHit(hit, 1, hit.Position)
        elseif hit.ContainsHit and gun.showHit then
            logger.log('non FPS Target')
            hits[1] = gun.simplifyHit(hit, 1, hit.Position)
            hits[1].Static = true
        end
    end
    return hits
end

gun.batchSender = function()
    logger.log('gun.batchSender hitBatch size monitor', gun.hitBatch)
        if #gun.hitBatch > 0 then
        logger.log('gun.batchSender in', gun.hitBatch)

            Space.Network.SendNetworkMessage(channel .. '.hitbatch', gun.hitBatch, false)

        gun.hitBatch = {}

        logger.log('gun.batchSender out', gun.hitBatch)
    end
end

gun.fire = function()
    -- logger.log('trying fire', gun.stats)
    if gun.stats == nil or gun.stats.bullets == nil then
        -- logger.log('no stats or no bullets')
        return
    end
    if gun.stats.bullets[gun.bulletType] == nil then
        -- logger.log('no bullets of type ' + gun.bulletType, gun.stats.bullets)
        return
    end
    if gun.stats.bullets[gun.bulletType] > 0 then
        -- logger.log('aiming')
        local startPos = Space.Camera.MainCamera.WorldPosition

        local hits = gun.detect(startPos)

        if hits ~= nil then
            logger.log('fire, hits', #hits)
            if #hits > 0 then
                logger.log('first hit', hits[1])
            end
        else
            logger.log('no hit')
        end

        -- logger.log('fire, hit', hit)
        Space.Host.InvokeEvent('fire')

        gun.stats.bullets[gun.bulletType] = gun.stats.bullets[gun.bulletType] - 1

        if hits ~= nil and #hits > 0 then
            for i = 1, #hits, 1 do
                local hit = hits[i]
                if hit.Avatar ~= nil then
                    if hit.Avatar.ID ~= Space.Scene.PlayerAvatar.ID then
                        logger.log('hit Avatar')
                        local data = {}
                        data['command'] = 'bullet'
                        data['damage'] = hit.Damage
                        data['position'] = hit.Position
                        data['shooterposition'] = hit.ShooterPos
                        data['shootername'] = hit.ShooterName
                        data['shooterid'] = hit.ShooterId
                        data['player'] = hit.Avatar.ID
                        data['hitNormal'] = hit.Normal
                        data['normal'] = (hit.ShooterPos - hit.Position).Normalised
                        data['type'] = gun.bulletType
                        data['showHit'] = gun.showHit
                        Space.Shared.CallFunction(channel .. '.' .. tostring(hit.Avatar.ID), 'hit', {data})
                        Space.Shared.CallBroadcastFunction(channel .. '.bullets', 'hit', {data})
                        -- Space.Network.SendNetworkMessage(channel .. '.hit', data)
                        data.hittype = 'player'
                        table.insert(gun.hitBatch, data)
                    -- coroutine.yield(0)
                    end
                elseif not hit.Static then
                    -- coroutine.yield(0)
                    logger.log('hit NPC', hit.Object.Name)
                    local data = {}
                    data['command'] = 'bullet'
                    data['damage'] = hit.Damage
                    data['position'] = hit.Position
                    data['shooterposition'] = hit.ShooterPos
                    data['hitNormal'] = hit.Normal
                    data['normal'] = (hit.ShooterPos - hit.Position).Normalised
                    data['type'] = gun.bulletType
                    data['showHit'] = gun.showHit
                    Space.Shared.CallFunction(channel .. '.' .. hit.Object.Name, 'hit', {data})
                    Space.Shared.CallBroadcastFunction(channel .. '.bullets', 'hit', {data})
                    -- Space.Network.SendNetworkMessage(channel .. '.hit', data, false)
                    data.hittype = 'npc'
                    table.insert(gun.hitBatch, data)
                    logger.log('end hit NPC', gun.hitBatch)
                elseif hit.Static and gun.showHit then
                    logger.log('sending hit', hit.Object.Root.Name)
                    local hitData = {}
                    hitData['command'] = 'bullet'
                    hitData['damage'] = gun.damage
                    hitData['position'] = hit.Position
                    hitData['hitNormal'] = hit.Normal
                    hitData['normal'] = (hit.ShooterPos - hit.Position).Normalised
                    hitData['type'] = gun.bulletType
                    hitData['showHit'] = gun.showHit
                    hitData['shooterid'] = Space.Scene.PlayerAvatar.ID
                    hitData['bullet'] = gun.bullet
                    -- Space.Network.SendNetworkMessage(channel .. '.hit', hitData, false)
                    Space.Shared.CallBroadcastFunction(channel .. '.bullets', 'hit', {hitData})
                    hitData.hittype = 'bullets'
                    table.insert(gun.hitBatch, hitData)
                end
                coroutine.yield(0)
            end
            logger.log('hitBatch', gun.hitBatch)
            Space.Shared.CallFunction(channel, 'updateMeter', {})
        else
            logger.log('hitBatch empty')
            Space.Shared.CallFunction(channel, 'updateMeter', {})
        end
    else
        Space.Host.InvokeEvent('empty')
    end
end

gun.onDisable = function()
    -- Space.Log('onDisable')
    for i = 1, gun.poolSize, 1 do
        local item = gun.bulletPool[i]
        item.bullet.ParticleSystem.Stop(true)
        item.bullet.Active = false
    end
end

gun.onUpdate = function()
    if Space.Input.Fire then
        -- logger.log('got fire in onUpdate')
        if Space.Time > gun.nextFire then
            -- logger.log('got valid time for shot')
            gun.nextFire = Space.Time + gun.fireInterval
            Space.Host.StartCoroutine(gun.fire, nil, 'gun.fire')
        -- else
        -- logger.log('no shots allowed')
        end
    end
    if gun.nextSend < Space.Time then
        gun.batchSender()
        gun.nextSend = Space.Time + gun.batchInterval
    end
end

gun.init = function()
    gun.fireInterval = 1.0 / gun.fireRate
    gun.nextFire = 0

    gun.stats = Space.Shared.GetGlobal(channel, 'stats')

    logger.log('local')
    logger.log('fire interval: ' .. tostring(gun.fireInterval))
    Space.Host.ExecutingObject.OnUpdate(gun.onUpdate)
    Space.Host.ExecutingObject.OnDisable(gun.onDisable)

    Space.Host.StartCoroutine(gun.batchSender, nil, 'gun.batchSender')
end

-- gun.init()
Space.Host.StartCoroutine(gun.init, nil, 'Barrel init')
