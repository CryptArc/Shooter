channel = channel or 'space.sine.fps'

respawningArea = {}
respawningArea.safeRange = safeRange or 5
logger = logger or {}

respawningArea.attachWorldHudCoroutine = function()
    logger.log('starting hud watching coroutine')
    while true do
        local avatars = Space.Scene.AllAvatars

        for i = 1, #avatars, 1 do
            local avatar = avatars[i]
            if avatar ~= nil then
                if
                    avatar.ID ~= Space.Scene.PlayerAvatar.ID and avatar.Username ~= nil and avatar.Username ~= '' and
                        avatar.Loaded
                 then
                    local foundHud = avatar.GameObject.GetScriptInChildren('FPS-WORLDMETER')
                    if foundHud ~= nil then
                        if not foundHud.GameObject.Alive then
                            logger.log('found dead worldmeter object')
                            foundHud.GameObject.Alive.Destroy()
                            foundHud = nil
                            coroutine.yield(0)
                        end
                    end
                    if foundHud == nil then
                        logger.log('found unknown user, attaching hud', avatar.Username)
                        local hud = Space.GetResource('worldmeter')
                        local worldHud = Space.Scene.CreateGameObject(hud)
                        Space.Scene.MarkObjectTemporary(worldHud)
                        worldHud.LocalPosition = Vector.New(0, 0.4, 0)
                        worldHud.SetParent(avatar.GameObject, false)
                        coroutine.yield(0)
                        local fps = worldHud.GetScript('FPS-WORLDMETER')
                        fps.SetPublicVariable('safeZone', tostring(Space.Host.ExecutingObject.WorldPosition), false)
                        fps.SetPublicVariable('safeDistance', tostring(respawningArea.safeRange), false)
                        worldHud.Active = true
                    end

                    local foundCollider = avatar.GameObject.GetScriptInChildren('FPS-HEADCOLLIDER')
                    if foundCollider ~= nil then
                        if not foundCollider.GameObject.Alive then
                            logger.log('found dead headcollider object')
                            foundCollider.GameObject.Alive.Destroy()
                            foundCollider = nil
                            coroutine.yield(0)
                        end
                    end

                    if foundCollider == nil then
                        local head = Space.GetResource('headcollider')
                        local worldHead = Space.Scene.CreateGameObject(head)
                        Space.Scene.MarkObjectTemporary(worldHead)
                        local bone = avatar.FindBone('Head')
                        worldHead.SetParent(bone, false)
                        worldHead.LocalPosition = Vector.New(0, 0.1, 0)
                        worldHead.Active = true
                    end
                end
            end
        end
        coroutine.yield(2)
    end
end

respawningArea.init = function()
    logger.log('Initializing respawningArea')
    Space.Host.StartCoroutine(respawningArea.attachWorldHudCoroutine, nil, 'respawningArea.attachWorldHudCoroutine')
end

-- if Space.InEditor then
Space.Host.InvokeDelayed(respawningArea.init, 5)
-- else
--     respawningArea.init()
-- end
-- respawningArea.init()
